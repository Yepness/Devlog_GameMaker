//Create:

port = 25555;
max_clients = 8;
//Criação do servidor utilizando TCP na porta 25555 com um máximo de 4 jogadores
network_create_server(network_socket_tcp,port,max_clients);
//Criação da varável de envio de pacote de dados (buffers)
server_buffer = buffer_create(1024,buffer_fixed,1);
//socket é o id unico do cliente que está conectado
socket_list = ds_list_create();
socket_to_instanceid = ds_map_create();

playerSpawn_x = 485;
playerSpawn_y = 410;

//Async-Networking:

//criar um ds_map e obter dados dele
type_event = ds_map_find_value(async_load,"type");

switch(type_event)
{
	//Quando conectar adcionar o cliente a lista de socket
	case network_type_connect:
		socket = ds_map_find_value(async_load,"socket");
		ds_list_add(socket_list,socket);

		buffer_seek(server_buffer,buffer_seek_start,0);
		buffer_write(server_buffer,buffer_u8,network.player_establish);
		buffer_write(server_buffer,buffer_u8,socket);
		network_send_packet(socket,server_buffer,buffer_tell(server_buffer));
		
	break;
	//Quando desconectar o socket será deletado e não enviará mais dados ao client deletado 	
	case network_type_disconnect:
		socket = ds_map_find_value(async_load,"socket");
		ds_list_delete(socket_list,ds_list_find_index(socket_list,socket));

		var i = 0
		repeat(ds_list_size(socket_list))
		{
			var _sock = ds_list_find_value(socket_list,i);
			buffer_seek(server_buffer,buffer_seek_start,0);
			buffer_write(server_buffer,buffer_u8,network.player_disconnect);
			buffer_write(server_buffer,buffer_u8,socket);
			network_send_packet(_sock,server_buffer,buffer_tell(server_buffer));
			i++
		}
		
		with(ds_map_find_value(socket_to_instanceid,socket))
		{
			instance_destroy()
		}
		ds_map_delete(socket_to_instanceid,socket);
		break;
	//Envido de dados no jogo	
	case network_type_data:
		buffer = ds_map_find_value(async_load,"buffer");
		socket = ds_map_find_value(async_load,"id");
		buffer_seek(buffer,buffer_seek_start,0);
		received_packet_sv(buffer,socket);
		break;
}
